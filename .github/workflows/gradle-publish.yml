name: CI/CD Pipeline

# 워크플로우 트리거 조건
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 환경 변수 설정
env:
  HARBOR_REGISTRY: your-harbor-domain.com  # Harbor 레지스트리 주소
  HARBOR_PROJECT: your-project-name        # Harbor 프로젝트명
  IMAGE_NAME: your-app-name                # 이미지명
  JAVA_VERSION: '21'                       # Java 버전

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
#    runs-on: [self-hosted, cicd-ys-ext-build-worker]

    steps:
      # 1. 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리를 가져옴 (버전 태그 등을 위해)

      # 2. Java 환경 설정
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'  # Eclipse Temurin (AdoptOpenJDK)

      # 3. Gradle 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle wrapper 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # 6. 테스트 결과 업로드 (선택사항)
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()  # 테스트가 실패해도 결과 업로드
        with:
          files: build/test-results/**/*.xml

      # 7. 애플리케이션 빌드
      - name: Build application
        run: ./gradlew build

      # 8. Harbor 로그인
#      - name: Log in to Harbor
#        uses: docker/login-action@v3
#        with:
#          registry: ${{ env.HARBOR_REGISTRY }}
#          username: ${{ secrets.HARBOR_USERNAME }}
#          password: ${{ secrets.HARBOR_PASSWORD }}

      # 9. 이미지 태그 생성 (GitHub SHA 기반)
      - name: Generate image tags
        id: meta
        run: |
          echo "tags=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "latest_tag=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      # 10. Jib를 사용한 Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image with Jib
        run: |
          ./gradlew jib \
            -Djib.to.image=${{ steps.meta.outputs.tags }} \
            -Djib.to.auth.username=${{ secrets.HARBOR_USERNAME }} \
            -Djib.to.auth.password=${{ secrets.HARBOR_PASSWORD }}

      # 11. latest 태그로도 푸시 (main 브랜치일 때만)
      - name: Tag and push as latest
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          ./gradlew jib \
            -Djib.to.image=${{ steps.meta.outputs.latest_tag }} \
            -Djib.to.auth.username=${{ secrets.HARBOR_USERNAME }} \
            -Djib.to.auth.password=${{ secrets.HARBOR_PASSWORD }}

      # 12. 빌드 아티팩트 업로드 (선택사항)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-artifacts
          path: |
            build/libs/*.jar
            build/reports/
          retention-days: 30

      # 13. Slack 알림 (선택사항)
      - name: Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployment'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
